virt-install \
  --name {{ inventory_hostname }} \
  --vcpus {{ vcpus }} \
  --ram {{ ram }} \
  --connect=qemu:///system \
  --autostart \
  --noautoconsole \
{% if guest_type is defined and guest_type == "image" %}
  --import \
  --disk {{ image_path}}/{{ inventory_hostname }}.iso,device=cdrom \
  --virt-type kvm \
{% endif %}
{% for bridge in bridges %}
{% set bridge_config = "model=virtio" %}
{% if virtio_multiqueue is defined %}
{% set bridge_config = bridge_config + ",driver_name=vhost,driver_queues=%s" % vcpus %}
{% elif mac_address is defined %}
{% set bridge_config = bridge_config + ",mac=%s" % mac_address %}
{% endif %}
  --network bridge={{ bridge }},{{ bridge_config }} \
{% endfor %}
{% set default_args = "console=tty0 inst.text plymouth.enable=0 " %}
{% if guest_type is not defined or guest_type != "image" %}
{% set default_args = default_args + "inst.ks=file:/%s.ks" % inventory_hostname %}
{% set custom_args = provision_virt_install_extra_settings | join(' ') if provision_virt_install_extra_settings is defined else "" %}
  --extra-args="{{ default_args }} {{ custom_args }}" \
  --cpu=host-model \
{% for device in (vm_pci_passthrough_devices | default([])) %}
  --host-device={{ device }} \
{% endfor %}
  {{ kickstart_graphics | default('--nographics') }} \
  --location={{ install_url }} \
  --initrd-inject={{ runtime_tempdir }}/{{ inventory_hostname }}.ks \
{% endif %}
{% if os_variant is defined %}
  --os-variant={{ os_variant }} \
{% endif %}
  --wait={{ install_timeout }} \
{% for disk in disks %}
  --disk path={{ disk.path }},cache=writethrough,discard=unmap,device=disk,bus=virtio,size={{ disk.size }},format={{ disk.format | default('raw') }}
{% endfor %}
