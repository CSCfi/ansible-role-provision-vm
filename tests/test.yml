---

-   name: Playbook for CI testing.
    hosts: localhost
    remote_user: root
    vars:
      install_extra_packages:
        - bridge-utils
        - libvirt
        - NetworkManager
        - openssh-server
        - python3-libvirt
        - qemu-kvm
        - qemu-img
        - virt-install
        - virt-top
      ansible_python_interpreter: /usr/libexec/platform-python

    pre_tasks:
      - name: Add target VMs dynamically based on the hypervisor OS
        ansible.builtin.add_host:
          name: "{{ item }}"
          groups: provision_vm
        loop: >- 
          {{ 
            groups['centos8'] if ansible_distribution_major_version == '8' 
            else (groups['centos8'] + groups['almalinux9']) 
          }}
        when: ansible_distribution_major_version == '8' or ansible_distribution_major_version == '9'

      - name: Clear all previously gathered facts
        meta: clear_facts
      - name: Install requirement packages for the hypervisor
        package:
          name: "{{ item }}"
          state: present
        when: install_extra_packages is defined
        loop: "{{ install_extra_packages }}"

      - name: Create directory for libvirt
        file:
          path: "/etc/libvirt/qemu/"
          state: directory
          recurse: yes

      - file:
          path: "/etc/libvirt/qemu/{{ inventory_hostname }}.xml"
          state: touch

      - name: Start services
        service:
          name: "{{ item }}"
          state: started
          enabled: yes
        with_items:
          - "sshd"
          - "libvirtd"
          - "NetworkManager"

      - name: Show the network connections
        command: "nmcli con show"

      - name: Check the network connections
        command: nmcli -t -f NAME connection show
        register: nmcli_connections
        changed_when: false

      - name: Ensure bridge br-example exists
        command: >
          nmcli connection add type bridge
          con-name br-example
          ifname br-example
          ipv4.method manual
          ipv4.addresses 192.168.1.10/24
          ipv4.gateway 192.168.1.1
          ipv4.dns "8.8.8.8 1.1.1.1"
          ipv6.method ignore
          autoconnect yes
        args:
          creates: /etc/NetworkManager/system-connections/br-example.nmconnection
        when: "'br-example' not in nmcli_connections.stdout_lines"

      - name: Add physical NIC ens3 as bridge slave
        command: >
          nmcli connection add type ethernet
          con-name br-example-slave
          ifname ens3
          master br-example
          autoconnect yes
        args:
          creates: /etc/NetworkManager/system-connections/br-example-slave.nmconnection
        when: "'br-example-slave' not in nmcli_connections.stdout_lines"

      - name: Bring up bridge
        command: nmcli connection up br-example

      - name: Bring up bridge slave
        command: nmcli connection up br-example-slave

      - name: Assign bridge to firewalld zone
        firewalld:
          zone: public
          interface: br-example
          permanent: true
          state: enabled

      - name: Reload firewalld
        command: firewall-cmd --reload

      # - name: Create network bridge br-example
      #   command: >
      #     nmcli connection add type bridge
      #     con-name br-example
      #     ifname br-example
      #     ipv4.method manual
      #     ipv4.addresses 192.168.1.10/24
      #     ipv4.gateway 192.168.1.1
      #     ipv4.dns 8.8.8.8
      #     autoconnect yes
      #   when: "'br-example' not in nmcli_connections.stdout_lines"

      # - name: Add physical interface to the bridge
      #   command: > 
      #     nmcli connection add type bridge-slave
      #     con-name br-example-slave
      #     ifname ens3
      #     master br-example
      #     autoconnect yes
      #   when: "'br-example-slave' not in nmcli_connections.stdout_lines"
        
      # - name: Restart NetworkManager
      #   command: "systemctl restart NetworkManager"



      - name: Show the network connections
        command: "nmcli con show"

-   name: Playbook for CI testing.
    hosts: provision_vm
    serial: 1
    gather_facts: yes
    remote_user: root
    vars:
      hyper: "localhost"
      virt_type: qemu
      provision_cleanup_runtimedir: False
      root_password: "{{ lookup('password', 'credentials/'+ inventory_hostname  +'_rootpw length=15 chars=ascii_letters,digits,hexdigits,.,_,,') }}"
      dns:
        - 8.8.8.8
      network_mask: "255.255.255.0"
      network_prefix: "/24"
      network_gateway4: "192.168.1.1"
      internal_ip: "{{ network_address }}"
      ansible_python_interpreter: /usr/libexec/platform-python

    pre_tasks:
    - name: Set bridges variable if br-example exists
      set_fact:
        bridges:
          - br-example
      when: "'br-example' in ansible_facts['interfaces']" #inside the hypervisor
      delegate_to: hypervisor
    roles:
      - ansible-role-provision-vm
...
